/**
 * --- Funnel Utility Functions ---
 * This file contains helper functions related to creating and managing funnel structures.
 * Keeping these functions separate helps to maintain a clean and organized codebase.
 */

interface FunnelBlockOption {
  text: string;
  nextBlockId: string | null;
}

interface FunnelBlock {
  id: string;
  message: string;
  options: FunnelBlockOption[];
}

interface FunnelStage {
  id: string;
  name: string;
  explanation: string;
  blockIds: string[];
}

interface FunnelFlow {
  startBlockId: string;
  stages: FunnelStage[];
  blocks: Record<string, FunnelBlock>;
}

interface Resource {
  id: string;
  type: string;
  name: string;
  link: string;
  code: string;
  category: string;
}

interface Funnel {
  id: string;
  name: string;
  allocation: number;
  resources: Resource[];
  flow: FunnelFlow | null;
  isDeployed: boolean;
  delay: number;
}

/**
 * Creates a basic funnel object with default values. This is used when a new funnel
 * is created by the user, providing a clean slate to start from.
 * @param {string} id - The unique identifier for the funnel (e.g., 'A', 'B').
 * @param {string} name - The display name for the funnel.
 * @param {number} [allocation=0] - The percentage of traffic allocated to this funnel.
 * @param {boolean} [isDeployed=false] - Whether the funnel is currently live.
 * @returns {Funnel} A new funnel object.
 */
export const createDefaultFunnel = (
  id: string, 
  name: string, 
  allocation: number = 0, 
  isDeployed: boolean = false
): Funnel => ({
    id,
    name,
    allocation,
    resources: [], // A new funnel starts with no resources.
    flow: null,    // The visual flow is null until generated by the AI.
    isDeployed,
    delay: 0,      // The welcome message delay defaults to 0 seconds.
});

/**
 * Creates a funnel flow object specifically for displaying errors.
 * This is used when the AI generation fails, providing a clear error message
 * to the user within the funnel visualizer.
 * @returns {FunnelFlow} An error-specific funnel flow object.
 */
export const createErrorFunnelFlow = (): FunnelFlow => ({
    startBlockId: 'error_start',
    stages: [
        { 
            id: 'stage-error', 
            name: 'ERROR', 
            explanation: 'Generation failed.', 
            blockIds: ['error_start'] 
        }
    ],
    blocks: {
        'error_start': { 
            id: 'error_start', 
            message: "An error occurred during generation. Please see the message above and try again.", 
            options: [] 
        },
    }
});


